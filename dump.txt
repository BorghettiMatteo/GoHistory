#
bmZpZyBmaWxlCglfLCBlcnIgOj0gb3MuU3RhdCgiL2hvbWUvbWF0dGVvL3Byb2dyYW1tYXppb25lL0dvQ2xpcGJvYXJkL0dvSGlzdG9yeS9jb25maWcueG1sIiAvKiBvcy5BcmdzWzFdICovKQoJaWYgZXJyICE9IG5pbCB7CgkJcHJpbnRsbigiRVJST1I6IEZpbGUgZG9lcyBub3QgZXhpc3QgZ29kZGFtaXQiKQoJCXJldHVybgoJfQoJLy9pZiB0aGVyZSBpcyB0aGUgY29uZmlnZmlsZSwgZHVtcCBhbmQgdW5tYXJzaGFsbAoJZHVtcCwgZXJyIDo9IG9zLlJlYWRGaWxlKCIvaG9tZS9tYXR0ZW8vcHJvZ3JhbW1hemlvbmUvR29DbGlwYm9hcmQvR29IaXN0b3J5L2NvbmZpZy54bWwiIC8qIG9zLkFyZ3NbMV0gKi8pCglpZiBlcnIgIT0gbmlsIHsKCQlwcmludGxuKCJFUlJPUjogQ2Fubm90IGxvYWQgY29uZmlndXJhdGlvbiIpCgkJcGFuaWMoZXJyKQoJfQoKCS8vdW5tYXJzaGFsIHN0cnVjdA==
#
cGFja2FnZSBtb2RlbHMKCmltcG9ydCAoCgkiZW5jb2RpbmcveG1sIgoJIm9zIgopCgp0eXBlIENvbmZpZ3VyYXRpb24gc3RydWN0IHsKCVhNTE5hbWUgICAgICAgICAgIHhtbC5OYW1lIGB4bWw6IkNvbmZpZ3VyYXRpb24iYAoJQ2xpcEd1aSAgICAgICAgICAgc3RyaW5nICAgYHhtbDoiY2xpcEd1aSJgCglEdW1wRmlsZVBhdGggICAgICBzdHJpbmcgICBgeG1sOiJEdW1wRmlsZVBhdGgiYAoJQnVmZmVyTGVuZ2h0ICAgICAgaW50ICAgICAgYHhtbDoiQnVmZmVyTGVuZ2h0ImAKCUJhY2tVcEZyZXF1ZW5jeSAgIHN0cmluZyAgIGB4bWw6IkJhY2tVcEZyZXF1ZW5jeSJgCglCYWNrVVNwdHJhdGVneSAgICBzdHJpbmcgICBgeG1sOiJCYWNrVXBTdHJhdGVneSJgCglCYWNrVXBTdG9yYWdlUGF0aCBzdHJpbmcgICBgeG1sOiJCYWNrVXBTdG9yYWdlUGF0aCJgCn0KCmZ1bmMgKGMgKkNvbmZpZ3VyYXRpb24pIExvYWRDb25maWd1cmF0aW9uKCkgewoJLy9sb2FkIHBhdGggb2YgY29uZmlndXJhdGlvbgoKCS8vY2hlY2sgaWYgZmlsZSBleGlzdCBpbiByb290IGRpcmVjdG9yeQoJLy9hcmdzWzFdIGNvbnRhaW5zIHRoZSBwYXRoIHRvIHRoZSBjb25maWcgZmlsZQoJXywgZXJyIDo9IG9zLlN0YXQoIi9ob21lL21hdHRlby9wcm9ncmFtbWF6aW9uZS9Hb0NsaXBib2FyZC9Hb0hpc3RvcnkvY29uZmlnLnhtbCIgLyogb3MuQXJnc1sxXSAqLykKCWlmIGVyciAhPSBuaWwgewoJCXByaW50bG4oIkVSUk9SOiBGaWxlIGRvZXMgbm90IGV4aXN0IGdvZGRhbWl0IikKCQlyZXR1cm4KCX0KCS8vaWYgdGhlcmUgaXMgdGhlIGNvbmZpZ2ZpbGUsIGR1bXAgYW5kIHVubWFyc2hhbGwKCWR1bXAsIGVyciA6PSBvcy5SZWFkRmlsZSgiL2hvbWUvbWF0dGVvL3Byb2dyYW1tYXppb25lL0dvQ2xpcGJvYXJkL0dvSGlzdG9yeS9jb25maWcueG1sIiAvKiBvcy5BcmdzWzFdICovKQoJaWYgZXJyICE9IG5pbCB7CgkJcHJpbnRsbigiRVJST1I6IENhbm5vdCBsb2FkIGNvbmZpZ3VyYXRpb24iKQoJCXBhbmljKGVycikKCX0KCgkvL3VubWFyc2hhbCBzdHJ1Y3QKCWVyciA9IHhtbC5Vbm1hcnNoYWwoZHVtcCwgYykKCWlmIGVyciAhPSBuaWwgewoJCXBhbmljKGVycikKCX0KfQo=
#
Ly90aGlzIGZpbGUgd2lsbCBkZWZpbmUgZXZlcnl0aGluZyBuZWVkZWQgdG8gcnVuIGJhY2t1cCBqb2Igb24gdGhlIGNsaXBib2FyZCBmaWxlCgpwYWNrYWdlIG1vZGVscwoKaW1wb3J0ICgKCSJieXRlcyIKCSJjb21wcmVzcy9nemlwIgopCgp0eXBlIENvbmNyZXRlQmFja1VwU3RyYXRlZ3kgaW50ZXJmYWNlIHsKCURvKHNjaGVkdWxlIHN0cmluZykKCUluaXRCYWNrdXAoYyAqQ29uZmlndXJhdGlvbikKfQoKdHlwZSBJbnRlcm5Kb2Igc3RydWN0IHsKCWZpbGVwYXRoIHN0cmluZwp9Cgp0eXBlIEJhY2t1cCBzdHJ1Y3QgewoJQmFja3VwICAgQ29uY3JldGVCYWNrVXBTdHJhdGVneQoJU2NoZWR1bGUgc3RyaW5nCglLZXlzICAgICBzdHJpbmcKfQoKZnVuYyAoYyAqQmFja3VwKSBFeGVjdXRlQmFja3VwKCkgewoJYy5CYWNrdXAuRG8oYy5TY2hlZHVsZSkKfQoKZnVuYyAoYyAqQmFja3VwKSBTZXR1cEJhY2t1cChjb25maWcgKkNvbmZpZ3VyYXRpb24pIHsKCXN3aXRjaCBjb25maWcuQmFja1VTcHRyYXRlZ3kgewoJY2FzZSAiZmlsZXN5c3RlbSI6CgkJYy5CYWNrdXAgPSBuZXcoRmlsZVN5c3RlbUJhY2t1cCkKCWNhc2UgImF3cyI6CgkJYy5CYWNrdXAgPSBuZXcoQVdTQmFja3VwcGVyKQoJfQoJYy5TY2hlZHVsZSA9IGNvbmZpZy5CYWNrVXBGcmVxdWVuY3kKCWMuQmFja3VwLkluaXRCYWNrdXAoY29uZmlnKQp9CgpmdW5jIENyZWF0ZUNvbXByZXNzZWRMb2coZHVtcCBbXWJ5dGUpIChbXWJ5dGUsIGVycm9yKSB7Cgl2YXIgYnl0ZXNCdWZmIGJ5dGVzLkJ1ZmZlcgoJd3JpdGVyIDo9IGd6aXAuTmV3V3JpdGVyKCZieXRlc0J1ZmYpCglfLCBlcnIgOj0gd3JpdGVyLldyaXRlKGR1bXApCgl3cml0ZXIuRmx1c2goKQoJZGVmZXIgd3JpdGVyLkNsb3NlKCkKCWlmIGVyciAhPSBuaWwgewoJCXJldHVybiBuaWwsIGVycgoJfQoJcmV0dXJuIGJ5dGVzQnVmZi5CeXRlcygpLCBuaWwKfQo=
#

